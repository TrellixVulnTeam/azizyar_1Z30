{"ast":null,"code":"import cookie from 'cookie';\nimport { API_URL } from '@/config/index';\nexport default (async (req, res) => {\n  if (req.method === 'GET') {\n    if (!req.headers.cookie) {\n      res.status(403).json({\n        message: 'Not Authorized'\n      });\n      return;\n    }\n\n    const {\n      token\n    } = cookie.parse(req.headers.cookie);\n    const strapiRes = await fetch(`${API_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const user = await strapiRes.json();\n\n    if (strapiRes.ok) {\n      res.status(200).json({\n        user\n      });\n    } else {\n      res.status(403).json({\n        message: 'User forbidden'\n      });\n    }\n  } else {\n    res.setHeader('Allow', ['GET']);\n    res.status(405).json({\n      message: `Method ${req.method} not allowed`\n    });\n  }\n});","map":{"version":3,"sources":["E:/azizyar/front/pages/api/user.js"],"names":["cookie","API_URL","req","res","method","headers","status","json","message","token","parse","strapiRes","fetch","Authorization","user","ok","setHeader"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB,QAAI,CAACF,GAAG,CAACG,OAAJ,CAAYL,MAAjB,EAAyB;AACvBG,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAYT,MAAM,CAACU,KAAP,CAAaR,GAAG,CAACG,OAAJ,CAAYL,MAAzB,CAAlB;AAEA,UAAMW,SAAS,GAAG,MAAMC,KAAK,CAAE,GAAEX,OAAQ,WAAZ,EAAwB;AACnDG,MAAAA,MAAM,EAAE,KAD2C;AAEnDC,MAAAA,OAAO,EAAE;AACPQ,QAAAA,aAAa,EAAG,UAASJ,KAAM;AADxB;AAF0C,KAAxB,CAA7B;AAOA,UAAMK,IAAI,GAAG,MAAMH,SAAS,CAACJ,IAAV,EAAnB;;AAEA,QAAII,SAAS,CAACI,EAAd,EAAkB;AAChBZ,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,QAAAA;AAAF,OAArB;AACD,KAFD,MAEO;AACLX,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;AACF,GAtBD,MAsBO;AACLL,IAAAA,GAAG,CAACa,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACAb,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAG,UAASN,GAAG,CAACE,MAAO;AAAhC,KAArB;AACD;AACF,CA3BD","sourcesContent":["import cookie from 'cookie'\r\nimport { API_URL } from '@/config/index'\r\n\r\nexport default async (req, res) => {\r\n  if (req.method === 'GET') {\r\n    if (!req.headers.cookie) {\r\n      res.status(403).json({ message: 'Not Authorized' })\r\n      return\r\n    }\r\n\r\n    const { token } = cookie.parse(req.headers.cookie)\r\n\r\n    const strapiRes = await fetch(`${API_URL}/users/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n\r\n    const user = await strapiRes.json()\r\n\r\n    if (strapiRes.ok) {\r\n      res.status(200).json({ user })\r\n    } else {\r\n      res.status(403).json({ message: 'User forbidden' })\r\n    }\r\n  } else {\r\n    res.setHeader('Allow', ['GET'])\r\n    res.status(405).json({ message: `Method ${req.method} not allowed` })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}