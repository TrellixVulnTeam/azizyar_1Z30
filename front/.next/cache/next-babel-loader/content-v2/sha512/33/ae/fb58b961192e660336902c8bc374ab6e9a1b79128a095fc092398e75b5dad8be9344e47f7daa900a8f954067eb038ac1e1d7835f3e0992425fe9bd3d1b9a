{"ast":null,"code":"import { API_URL } from '@/config/index'; //import { API_URL, TOKEN_URL, CREDENTIALS } from '@/config/index';\n\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    const strapiRes = await fetch(`${API_URL}/time-token`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const time = await strapiRes.json();\n    const now = new Date().getTime();\n    const oldtime = +time.time;\n    const deference = now - oldtime;\n    console.log(deference);\n\n    if (deference >= 290000) {\n      // console.log(deference + ' working!');\n      const res2 = await fetch(`${API_URL}/time-token`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json' //  Authorization: `Bearer ${token}`,\n\n        },\n        body: JSON.stringify(values)\n      });\n\n      if (!res2.ok) {\n        toast.error('Something Went Wrong');\n      } else {\n        const evt = await res2.json();\n        toast('Updat Susses!');\n      }\n\n      const values = {\n        token: data.access_token,\n        time: +now\n      };\n      res.status(200).json(values);\n    } else {\n      res.status(200).json('NOT Working');\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).json({\n      message: `Method ${req.method} not allowed`\n    });\n  }\n}); // export default async (req, res) => {\n//   if (req.method === 'POST') {\n//     // const res = await fetch(`${API_URL}/time-token`);\n//     // const time = await res.json();\n//     // const now = new Date().getTime();\n//     // const oldtime = +time.time;\n//     // const deference = now - oldtime;\n//     //console.log(deference)\n//     if (deference >= 290000) {\n//       //console.log(deference + ' working!')\n//       //   const qlsRes = await fetch(`${TOKEN_URL}`, {\n//       //     method: 'post',\n//       //     headers: {\n//       //       Authorization:\n//       //         'Basic ' + Buffer.from(`${CREDENTIALS}`).toString('base64'),\n//       //       'Content-Type': 'application/json',\n//       //     },\n//       //   });\n//       //   const data = await qlsRes.json();\n//       //   const values = {\n//       //     token: data.access_token,\n//       //     time: +now,\n//       //   };\n//       //   res.status(200).json(values);\n//       res.status(200).json('working');\n//       //   const ean = req.body.ean\n//       //   fetch(\n//       //     `https://api.bol.com/catalog/v4/search/?q=${ean}&offset=0&limit=1&dataoutput=products&apikey=92D2DDD17E2245BDAFC0E359939510CA&format=json`\n//       //   )\n//       //     .then((response) => response.json())\n//       //     .then((json) => res.status(200).json(json.products[0].images[4].url))\n//     } else {\n//       //   const values = {\n//       //     token: 'Working',\n//       //     time: +now,\n//       //   };\n//       res.status(200).json('working');\n//     }\n//   } else {\n//     res.setHeader('Allow', ['POST']);\n//     res.status(405).json({ message: `Method ${req.method} not allowed` });\n//   }\n// };","map":{"version":3,"sources":["E:/azizyar/front/pages/api/token.js"],"names":["API_URL","req","res","method","strapiRes","fetch","headers","time","json","now","Date","getTime","oldtime","deference","console","log","res2","body","JSON","stringify","values","ok","toast","error","evt","token","data","access_token","status","setHeader","message"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB,C,CACA;;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,SAAS,GAAG,MAAMC,KAAK,CAAE,GAAEL,OAAQ,aAAZ,EAA0B;AACrDG,MAAAA,MAAM,EAAE,KAD6C;AAErDG,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAF4C,KAA1B,CAA7B;AAOA,UAAMC,IAAI,GAAG,MAAMH,SAAS,CAACI,IAAV,EAAnB;AAEA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,UAAMC,OAAO,GAAG,CAACL,IAAI,CAACA,IAAtB;AACA,UAAMM,SAAS,GAAGJ,GAAG,GAAGG,OAAxB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AAEA,QAAIA,SAAS,IAAI,MAAjB,EAAyB;AACvB;AAEA,YAAMG,IAAI,GAAG,MAAMX,KAAK,CAAE,GAAEL,OAAQ,aAAZ,EAA0B;AAChDG,QAAAA,MAAM,EAAE,KADwC;AAEhDG,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT,CAEP;;AAFO,SAFuC;AAMhDW,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,MAAf;AAN0C,OAA1B,CAAxB;;AASA,UAAI,CAACJ,IAAI,CAACK,EAAV,EAAc;AACZC,QAAAA,KAAK,CAACC,KAAN,CAAY,sBAAZ;AACD,OAFD,MAEO;AACL,cAAMC,GAAG,GAAG,MAAMR,IAAI,CAACR,IAAL,EAAlB;AACAc,QAAAA,KAAK,CAAC,eAAD,CAAL;AACD;;AAED,YAAMF,MAAM,GAAG;AACbK,QAAAA,KAAK,EAAEC,IAAI,CAACC,YADC;AAEbpB,QAAAA,IAAI,EAAE,CAACE;AAFM,OAAf;AAIAP,MAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqBY,MAArB;AACD,KAxBD,MAwBO;AACLlB,MAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB,aAArB;AACD;AACF,GA1CD,MA0CO;AACLN,IAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB,CAAC,MAAD,CAAvB;AACA3B,IAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEsB,MAAAA,OAAO,EAAG,UAAS7B,GAAG,CAACE,MAAO;AAAhC,KAArB;AACD;AACF,CA/CD,E,CAgDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { API_URL } from '@/config/index';\r\n//import { API_URL, TOKEN_URL, CREDENTIALS } from '@/config/index';\r\nexport default async (req, res) => {\r\n  if (req.method === 'POST') {\r\n    const strapiRes = await fetch(`${API_URL}/time-token`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    const time = await strapiRes.json();\r\n\r\n    const now = new Date().getTime();\r\n    const oldtime = +time.time;\r\n    const deference = now - oldtime;\r\n    console.log(deference);\r\n\r\n    if (deference >= 290000) {\r\n      // console.log(deference + ' working!');\r\n\r\n      const res2 = await fetch(`${API_URL}/time-token`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          //  Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(values),\r\n      });\r\n\r\n      if (!res2.ok) {\r\n        toast.error('Something Went Wrong');\r\n      } else {\r\n        const evt = await res2.json();\r\n        toast('Updat Susses!');\r\n      }\r\n\r\n      const values = {\r\n        token: data.access_token,\r\n        time: +now,\r\n      };\r\n      res.status(200).json(values);\r\n    } else {\r\n      res.status(200).json('NOT Working');\r\n    }\r\n  } else {\r\n    res.setHeader('Allow', ['POST']);\r\n    res.status(405).json({ message: `Method ${req.method} not allowed` });\r\n  }\r\n};\r\n// export default async (req, res) => {\r\n//   if (req.method === 'POST') {\r\n//     // const res = await fetch(`${API_URL}/time-token`);\r\n//     // const time = await res.json();\r\n\r\n//     // const now = new Date().getTime();\r\n//     // const oldtime = +time.time;\r\n//     // const deference = now - oldtime;\r\n//     //console.log(deference)\r\n\r\n//     if (deference >= 290000) {\r\n//       //console.log(deference + ' working!')\r\n\r\n//       //   const qlsRes = await fetch(`${TOKEN_URL}`, {\r\n//       //     method: 'post',\r\n//       //     headers: {\r\n//       //       Authorization:\r\n//       //         'Basic ' + Buffer.from(`${CREDENTIALS}`).toString('base64'),\r\n//       //       'Content-Type': 'application/json',\r\n//       //     },\r\n//       //   });\r\n//       //   const data = await qlsRes.json();\r\n\r\n//       //   const values = {\r\n//       //     token: data.access_token,\r\n//       //     time: +now,\r\n//       //   };\r\n\r\n//       //   res.status(200).json(values);\r\n//       res.status(200).json('working');\r\n//       //   const ean = req.body.ean\r\n\r\n//       //   fetch(\r\n//       //     `https://api.bol.com/catalog/v4/search/?q=${ean}&offset=0&limit=1&dataoutput=products&apikey=92D2DDD17E2245BDAFC0E359939510CA&format=json`\r\n//       //   )\r\n//       //     .then((response) => response.json())\r\n//       //     .then((json) => res.status(200).json(json.products[0].images[4].url))\r\n//     } else {\r\n//       //   const values = {\r\n//       //     token: 'Working',\r\n//       //     time: +now,\r\n//       //   };\r\n\r\n//       res.status(200).json('working');\r\n//     }\r\n//   } else {\r\n//     res.setHeader('Allow', ['POST']);\r\n//     res.status(405).json({ message: `Method ${req.method} not allowed` });\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}