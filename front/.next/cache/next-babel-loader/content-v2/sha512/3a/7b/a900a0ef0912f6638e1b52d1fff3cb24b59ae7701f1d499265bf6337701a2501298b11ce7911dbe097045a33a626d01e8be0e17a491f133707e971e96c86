{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ahmaddev/Apps/New_app/front/components/EventMap.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Image from 'next/image';\nimport { useState, useEffect } from 'react';\nimport ReactMapGl, { Marker } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport Geocode from 'react-geocode';\nexport default function EventMap({\n  evt\n}) {\n  const {\n    0: lat,\n    1: setLat\n  } = useState(null);\n  const {\n    0: lng,\n    1: setLng\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: viewport,\n    1: setViewport\n  } = useState({\n    latitude: 40.712772,\n    longitude: -73.935242,\n    width: '100%',\n    height: '500px',\n    zoom: 12\n  });\n  useEffect(() => {\n    // Get latitude & longitude from address.\n    Geocode.fromAddress(evt.address).then(response => {\n      const {\n        lat,\n        lng\n      } = response.results[0].geometry.location;\n      setLat(lat);\n      setLng(lng);\n      setViewport(_objectSpread(_objectSpread({}, viewport), {}, {\n        latitude: lat,\n        longitude: lng\n      }));\n      setLoading(false);\n    }, error => {\n      console.error(error);\n    });\n  }, []);\n  Geocode.setApiKey(process.env.NEXT_PUBLIC_GOOGLE_MAP_API_KEY);\n  if (loading) return false;\n  return /*#__PURE__*/_jsxDEV(ReactMapGl, _objectSpread(_objectSpread({}, viewport), {}, {\n    mapboxApiAccessToken: process.env.NEXT_PUBLIC_MAPBOX_API_TOKEN,\n    onViewportChange: vp => setViewport(vp),\n    children: /*#__PURE__*/_jsxDEV(Marker, {\n      latitude: lat,\n      longitude: lng,\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        src: \"/images/pin.svg\",\n        width: 30,\n        height: 30\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, evt.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/ahmaddev/Apps/New_app/front/components/EventMap.js"],"names":["Image","useState","useEffect","ReactMapGl","Marker","Geocode","EventMap","evt","lat","setLat","lng","setLng","loading","setLoading","viewport","setViewport","latitude","longitude","width","height","zoom","fromAddress","address","then","response","results","geometry","location","error","console","setApiKey","process","env","NEXT_PUBLIC_GOOGLE_MAP_API_KEY","NEXT_PUBLIC_MAPBOX_API_TOKEN","vp","id"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,IAAqBC,MAArB,QAAmC,cAAnC;AACA,OAAO,8BAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA2B;AACxC,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBR,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM;AAAA,OAACS,GAAD;AAAA,OAAMC;AAAN,MAAgBV,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACa,QAAD;AAAA,OAAWC;AAAX,MAA0Bd,QAAQ,CAAC;AACvCe,IAAAA,QAAQ,EAAE,SAD6B;AAEvCC,IAAAA,SAAS,EAAE,CAAC,SAF2B;AAGvCC,IAAAA,KAAK,EAAE,MAHgC;AAIvCC,IAAAA,MAAM,EAAE,OAJ+B;AAKvCC,IAAAA,IAAI,EAAE;AALiC,GAAD,CAAxC;AAQAlB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAG,IAAAA,OAAO,CAACgB,WAAR,CAAoBd,GAAG,CAACe,OAAxB,EAAiCC,IAAjC,CACGC,QAAD,IAAc;AACZ,YAAM;AAAEhB,QAAAA,GAAF;AAAOE,QAAAA;AAAP,UAAec,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAAlD;AACAlB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACAG,MAAAA,MAAM,CAACD,GAAD,CAAN;AACAK,MAAAA,WAAW,iCAAMD,QAAN;AAAgBE,QAAAA,QAAQ,EAAER,GAA1B;AAA+BS,QAAAA,SAAS,EAAEP;AAA1C,SAAX;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAPH,EAQGe,KAAD,IAAW;AACTC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAVH;AAYD,GAdQ,EAcN,EAdM,CAAT;AAgBAvB,EAAAA,OAAO,CAACyB,SAAR,CAAkBC,OAAO,CAACC,GAAR,CAAYC,8BAA9B;AAEA,MAAIrB,OAAJ,EAAa,OAAO,KAAP;AAEb,sBACE,QAAC,UAAD,kCACME,QADN;AAEE,IAAA,oBAAoB,EAAEiB,OAAO,CAACC,GAAR,CAAYE,4BAFpC;AAGE,IAAA,gBAAgB,EAAGC,EAAD,IAAQpB,WAAW,CAACoB,EAAD,CAHvC;AAAA,2BAKE,QAAC,MAAD;AAAqB,MAAA,QAAQ,EAAE3B,GAA/B;AAAoC,MAAA,SAAS,EAAEE,GAA/C;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,GAAG,EAAC,iBAAX;AAA6B,QAAA,KAAK,EAAE,EAApC;AAAwC,QAAA,MAAM,EAAE;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF,OAAaH,GAAG,CAAC6B,EAAjB;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD","sourcesContent":["import Image from 'next/image'\nimport { useState, useEffect } from 'react'\nimport ReactMapGl, { Marker } from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport Geocode from 'react-geocode'\n\nexport default function EventMap({ evt }) {\n  const [lat, setLat] = useState(null)\n  const [lng, setLng] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [viewport, setViewport] = useState({\n    latitude: 40.712772,\n    longitude: -73.935242,\n    width: '100%',\n    height: '500px',\n    zoom: 12,\n  })\n\n  useEffect(() => {\n    // Get latitude & longitude from address.\n    Geocode.fromAddress(evt.address).then(\n      (response) => {\n        const { lat, lng } = response.results[0].geometry.location\n        setLat(lat)\n        setLng(lng)\n        setViewport({ ...viewport, latitude: lat, longitude: lng })\n        setLoading(false)\n      },\n      (error) => {\n        console.error(error)\n      }\n    )\n  }, [])\n\n  Geocode.setApiKey(process.env.NEXT_PUBLIC_GOOGLE_MAP_API_KEY)\n\n  if (loading) return false\n\n  return (\n    <ReactMapGl\n      {...viewport}\n      mapboxApiAccessToken={process.env.NEXT_PUBLIC_MAPBOX_API_TOKEN}\n      onViewportChange={(vp) => setViewport(vp)}\n    >\n      <Marker key={evt.id} latitude={lat} longitude={lng}>\n        <Image src='/images/pin.svg' width={30} height={30} />\n      </Marker>\n    </ReactMapGl>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}