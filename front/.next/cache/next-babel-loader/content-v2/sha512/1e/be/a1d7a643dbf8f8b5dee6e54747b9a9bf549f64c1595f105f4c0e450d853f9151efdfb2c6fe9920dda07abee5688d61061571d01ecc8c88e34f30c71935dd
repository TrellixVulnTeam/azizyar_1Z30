{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"E:/azizyar/front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"E:\\\\azizyar\\\\front\\\\components\\\\EventMap.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Image from 'next/image';\nimport { useState, useEffect } from 'react';\nimport ReactMapGl, { Marker } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport Geocode from 'react-geocode';\nexport default function EventMap(_ref) {\n  _s();\n\n  var evt = _ref.evt;\n\n  var _useState = useState(null),\n      lat = _useState[0],\n      setLat = _useState[1];\n\n  var _useState2 = useState(null),\n      lng = _useState2[0],\n      setLng = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState({\n    latitude: 40.712772,\n    longitude: -73.935242,\n    width: '100%',\n    height: '500px',\n    zoom: 12\n  }),\n      viewport = _useState4[0],\n      setViewport = _useState4[1];\n\n  useEffect(function () {\n    // Get latitude & longitude from address.\n    Geocode.fromAddress(evt.address).then(function (response) {\n      var _response$results$0$g = response.results[0].geometry.location,\n          lat = _response$results$0$g.lat,\n          lng = _response$results$0$g.lng;\n      setLat(lat);\n      setLng(lng);\n      setViewport(_objectSpread(_objectSpread({}, viewport), {}, {\n        latitude: lat,\n        longitude: lng\n      }));\n      setLoading(false);\n    }, function (error) {\n      console.error(error);\n    });\n  }, []);\n  Geocode.setApiKey(process.env.NEXT_PUBLIC_GOOGLE_MAP_API_KEY);\n  if (loading) return false;\n  return /*#__PURE__*/_jsxDEV(ReactMapGl, _objectSpread(_objectSpread({}, viewport), {}, {\n    mapboxApiAccessToken: process.env.NEXT_PUBLIC_MAPBOX_API_TOKEN,\n    onViewportChange: function onViewportChange(vp) {\n      return setViewport(vp);\n    },\n    children: /*#__PURE__*/_jsxDEV(Marker, {\n      latitude: lat,\n      longitude: lng,\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        src: \"/images/pin.svg\",\n        width: 30,\n        height: 30\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, evt.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EventMap, \"0/qt6C6uJfPUVPlbQaH1ijW+s9c=\");\n\n_c = EventMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventMap\");","map":{"version":3,"sources":["E:/azizyar/front/components/EventMap.js"],"names":["Image","useState","useEffect","ReactMapGl","Marker","Geocode","EventMap","evt","lat","setLat","lng","setLng","loading","setLoading","latitude","longitude","width","height","zoom","viewport","setViewport","fromAddress","address","then","response","results","geometry","location","error","console","setApiKey","process","env","NEXT_PUBLIC_GOOGLE_MAP_API_KEY","NEXT_PUBLIC_MAPBOX_API_TOKEN","vp","id"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,IAAqBC,MAArB,QAAmC,cAAnC;AACA,OAAO,8BAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,eAAe,SAASC,QAAT,OAA2B;AAAA;;AAAA,MAAPC,GAAO,QAAPA,GAAO;;AAAA,kBAClBN,QAAQ,CAAC,IAAD,CADU;AAAA,MACjCO,GADiC;AAAA,MAC5BC,MAD4B;;AAAA,mBAElBR,QAAQ,CAAC,IAAD,CAFU;AAAA,MAEjCS,GAFiC;AAAA,MAE5BC,MAF4B;;AAAA,mBAGVV,QAAQ,CAAC,IAAD,CAHE;AAAA,MAGjCW,OAHiC;AAAA,MAGxBC,UAHwB;;AAAA,mBAIRZ,QAAQ,CAAC;AACvCa,IAAAA,QAAQ,EAAE,SAD6B;AAEvCC,IAAAA,SAAS,EAAE,CAAC,SAF2B;AAGvCC,IAAAA,KAAK,EAAE,MAHgC;AAIvCC,IAAAA,MAAM,EAAE,OAJ+B;AAKvCC,IAAAA,IAAI,EAAE;AALiC,GAAD,CAJA;AAAA,MAIjCC,QAJiC;AAAA,MAIvBC,WAJuB;;AAYxClB,EAAAA,SAAS,CAAC,YAAM;AACd;AACAG,IAAAA,OAAO,CAACgB,WAAR,CAAoBd,GAAG,CAACe,OAAxB,EAAiCC,IAAjC,CACE,UAACC,QAAD,EAAc;AAAA,kCACSA,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QADtC;AAAA,UACJnB,GADI,yBACJA,GADI;AAAA,UACCE,GADD,yBACCA,GADD;AAEZD,MAAAA,MAAM,CAACD,GAAD,CAAN;AACAG,MAAAA,MAAM,CAACD,GAAD,CAAN;AACAU,MAAAA,WAAW,iCAAMD,QAAN;AAAgBL,QAAAA,QAAQ,EAAEN,GAA1B;AAA+BO,QAAAA,SAAS,EAAEL;AAA1C,SAAX;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAPH,EAQE,UAACe,KAAD,EAAW;AACTC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAVH;AAYD,GAdQ,EAcN,EAdM,CAAT;AAgBAvB,EAAAA,OAAO,CAACyB,SAAR,CAAkBC,OAAO,CAACC,GAAR,CAAYC,8BAA9B;AAEA,MAAIrB,OAAJ,EAAa,OAAO,KAAP;AAEb,sBACE,QAAC,UAAD,kCACMO,QADN;AAEE,IAAA,oBAAoB,EAAEY,OAAO,CAACC,GAAR,CAAYE,4BAFpC;AAGE,IAAA,gBAAgB,EAAE,0BAACC,EAAD;AAAA,aAAQf,WAAW,CAACe,EAAD,CAAnB;AAAA,KAHpB;AAAA,2BAKE,QAAC,MAAD;AAAqB,MAAA,QAAQ,EAAE3B,GAA/B;AAAoC,MAAA,SAAS,EAAEE,GAA/C;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,GAAG,EAAC,iBAAX;AAA6B,QAAA,KAAK,EAAE,EAApC;AAAwC,QAAA,MAAM,EAAE;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF,OAAaH,GAAG,CAAC6B,EAAjB;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA3CuB9B,Q;;KAAAA,Q","sourcesContent":["import Image from 'next/image'\r\nimport { useState, useEffect } from 'react'\r\nimport ReactMapGl, { Marker } from 'react-map-gl'\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport Geocode from 'react-geocode'\r\n\r\nexport default function EventMap({ evt }) {\r\n  const [lat, setLat] = useState(null)\r\n  const [lng, setLng] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 40.712772,\r\n    longitude: -73.935242,\r\n    width: '100%',\r\n    height: '500px',\r\n    zoom: 12,\r\n  })\r\n\r\n  useEffect(() => {\r\n    // Get latitude & longitude from address.\r\n    Geocode.fromAddress(evt.address).then(\r\n      (response) => {\r\n        const { lat, lng } = response.results[0].geometry.location\r\n        setLat(lat)\r\n        setLng(lng)\r\n        setViewport({ ...viewport, latitude: lat, longitude: lng })\r\n        setLoading(false)\r\n      },\r\n      (error) => {\r\n        console.error(error)\r\n      }\r\n    )\r\n  }, [])\r\n\r\n  Geocode.setApiKey(process.env.NEXT_PUBLIC_GOOGLE_MAP_API_KEY)\r\n\r\n  if (loading) return false\r\n\r\n  return (\r\n    <ReactMapGl\r\n      {...viewport}\r\n      mapboxApiAccessToken={process.env.NEXT_PUBLIC_MAPBOX_API_TOKEN}\r\n      onViewportChange={(vp) => setViewport(vp)}\r\n    >\r\n      <Marker key={evt.id} latitude={lat} longitude={lng}>\r\n        <Image src='/images/pin.svg' width={30} height={30} />\r\n      </Marker>\r\n    </ReactMapGl>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}