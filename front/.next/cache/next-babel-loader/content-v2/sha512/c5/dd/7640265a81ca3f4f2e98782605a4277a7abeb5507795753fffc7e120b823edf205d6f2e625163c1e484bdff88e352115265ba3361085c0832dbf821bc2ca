{"ast":null,"code":"//import { API_URL } from '@/config/index';\nimport { API_URL, TOKEN_URL, CREDENTIALS } from '@/config/index';\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    const strapiRes = await fetch(`${API_URL}/time-token`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const time = await strapiRes.json();\n    const now = new Date().getTime();\n    const oldtime = +time.time;\n    const deference = now - oldtime;\n    console.log(deference);\n\n    if (deference >= 290000) {\n      //console.log(deference + ' working!');\n      const qlsRes = await fetch(`${TOKEN_URL}`, {\n        method: 'post',\n        headers: {\n          Authorization: 'Basic ' + Buffer.from(`${CREDENTIALS}`).toString('base64'),\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await qlsRes.json();\n      const values = {\n        token: data.access_token,\n        time: +now\n      };\n      const res2 = await fetch(`${API_URL}/time-token`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json' //  Authorization: `Bearer ${token}`,\n\n        },\n        body: JSON.stringify(values)\n      });\n      const res3 = await fetch(`${API_URL}/time-token`);\n      const newTime = await res3.json();\n      res.status(200).json(newTime);\n    } else {\n      const res3 = await fetch(`${API_URL}/time-token`);\n      const newTime = await res3.json();\n      res.status(200).json(newTime); // res.status(200).json('NOT Working');\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).json({\n      message: `Method ${req.method} not allowed`\n    });\n  }\n});","map":{"version":3,"sources":["/Users/ahmaddev/Apps/azizyar/front/pages/api/token.js"],"names":["API_URL","TOKEN_URL","CREDENTIALS","req","res","method","strapiRes","fetch","headers","time","json","now","Date","getTime","oldtime","deference","console","log","qlsRes","Authorization","Buffer","from","toString","data","values","token","access_token","res2","body","JSON","stringify","res3","newTime","status","setHeader","message"],"mappings":"AAAA;AACA,SAASA,OAAT,EAAkBC,SAAlB,EAA6BC,WAA7B,QAAgD,gBAAhD;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,SAAS,GAAG,MAAMC,KAAK,CAAE,GAAEP,OAAQ,aAAZ,EAA0B;AACrDK,MAAAA,MAAM,EAAE,KAD6C;AAErDG,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAF4C,KAA1B,CAA7B;AAOA,UAAMC,IAAI,GAAG,MAAMH,SAAS,CAACI,IAAV,EAAnB;AAEA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,UAAMC,OAAO,GAAG,CAACL,IAAI,CAACA,IAAtB;AACA,UAAMM,SAAS,GAAGJ,GAAG,GAAGG,OAAxB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AAEA,QAAIA,SAAS,IAAI,MAAjB,EAAyB;AACvB;AAEA,YAAMG,MAAM,GAAG,MAAMX,KAAK,CAAE,GAAEN,SAAU,EAAd,EAAiB;AACzCI,QAAAA,MAAM,EAAE,MADiC;AAEzCG,QAAAA,OAAO,EAAE;AACPW,UAAAA,aAAa,EACX,WAAWC,MAAM,CAACC,IAAP,CAAa,GAAEnB,WAAY,EAA3B,EAA8BoB,QAA9B,CAAuC,QAAvC,CAFN;AAGP,0BAAgB;AAHT;AAFgC,OAAjB,CAA1B;AAQA,YAAMC,IAAI,GAAG,MAAML,MAAM,CAACR,IAAP,EAAnB;AAEA,YAAMc,MAAM,GAAG;AACbC,QAAAA,KAAK,EAAEF,IAAI,CAACG,YADC;AAEbjB,QAAAA,IAAI,EAAE,CAACE;AAFM,OAAf;AAKA,YAAMgB,IAAI,GAAG,MAAMpB,KAAK,CAAE,GAAEP,OAAQ,aAAZ,EAA0B;AAChDK,QAAAA,MAAM,EAAE,KADwC;AAEhDG,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT,CAEP;;AAFO,SAFuC;AAMhDoB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AAN0C,OAA1B,CAAxB;AASA,YAAMO,IAAI,GAAG,MAAMxB,KAAK,CAAE,GAAEP,OAAQ,aAAZ,CAAxB;AACA,YAAMgC,OAAO,GAAG,MAAMD,IAAI,CAACrB,IAAL,EAAtB;AAEAN,MAAAA,GAAG,CAAC6B,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqBsB,OAArB;AACD,KA/BD,MA+BO;AACL,YAAMD,IAAI,GAAG,MAAMxB,KAAK,CAAE,GAAEP,OAAQ,aAAZ,CAAxB;AACA,YAAMgC,OAAO,GAAG,MAAMD,IAAI,CAACrB,IAAL,EAAtB;AAEAN,MAAAA,GAAG,CAAC6B,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqBsB,OAArB,EAJK,CAKL;AACD;AACF,GArDD,MAqDO;AACL5B,IAAAA,GAAG,CAAC8B,SAAJ,CAAc,OAAd,EAAuB,CAAC,MAAD,CAAvB;AACA9B,IAAAA,GAAG,CAAC6B,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqB;AAAEyB,MAAAA,OAAO,EAAG,UAAShC,GAAG,CAACE,MAAO;AAAhC,KAArB;AACD;AACF,CA1DD","sourcesContent":["//import { API_URL } from '@/config/index';\nimport { API_URL, TOKEN_URL, CREDENTIALS } from '@/config/index';\nexport default async (req, res) => {\n  if (req.method === 'POST') {\n    const strapiRes = await fetch(`${API_URL}/time-token`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const time = await strapiRes.json();\n\n    const now = new Date().getTime();\n    const oldtime = +time.time;\n    const deference = now - oldtime;\n    console.log(deference);\n\n    if (deference >= 290000) {\n      //console.log(deference + ' working!');\n\n      const qlsRes = await fetch(`${TOKEN_URL}`, {\n        method: 'post',\n        headers: {\n          Authorization:\n            'Basic ' + Buffer.from(`${CREDENTIALS}`).toString('base64'),\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await qlsRes.json();\n\n      const values = {\n        token: data.access_token,\n        time: +now,\n      };\n\n      const res2 = await fetch(`${API_URL}/time-token`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          //  Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(values),\n      });\n\n      const res3 = await fetch(`${API_URL}/time-token`);\n      const newTime = await res3.json();\n\n      res.status(200).json(newTime);\n    } else {\n      const res3 = await fetch(`${API_URL}/time-token`);\n      const newTime = await res3.json();\n\n      res.status(200).json(newTime);\n      // res.status(200).json('NOT Working');\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).json({ message: `Method ${req.method} not allowed` });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}